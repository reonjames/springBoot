SECTION-1 QUICK START
why Spring
	Spring makes programming Java quicker, easier, and safer for everybody. Springâ€™s focus on speed, simplicity, and productivity has made it the world's most popular Java framework.

Inversion of control:
	In software engineering, inversion of control (IoC) is a design pattern in which custom-written portions of a computer program receive the flow of control from a generic framework.
Dependency injector:
	In software engineering, dependency injection is a programming technique in which an object or function receives other objects or functions that it requires, as opposed to creating them internally. Dependency injection aims to separate the concerns of constructing objects and using them, leading to loosely coupled programs
Spring Boot transforms how you approach Java programming tasks, radically streamlining your experience. Spring Boot combines necessities such as an application context and an auto-configured, embedded web server to make microservice development a cinch.

Spring Initializr is a web-based tool using which we can easily generate the structure of the Spring Boot project. It also provides various different features for the projects expressed in a metadata model. This model allows us to configure the list of dependencies that are supported by JVM.

Spring Annotations are a form of metadata that provides data about a program. Annotations are used to provide supplemental information about a program. It does not have a direct effect on the operation of the code they annotate.
RestController: RestController is used for making restful web services with the help of the @RestController annotation. This annotation is used at the class level and allows the class to handle the requests made by the client. 

@PostMapping annotation in Spring MVC framework is a powerful tool for handling the HTTP POST requests in your RESTful web services. It maps specific URLs to handler methods allowing you to receive and process data submitted through POST requests. The @PostMapping annotation is a Spring annotation that is used to map HTTP POST requests onto specific handler methods.
@GetMapping annotation in Spring is a powerful tool for building RESTful web services. It maps HTTP GET requests to a specific handler method in Spring controllers. With the help of @GetMapping annotation we can easily define endpoints of RESTful API and handle various HTTP requests. @GetMapping annotation is used for mapping HTTP GET requests onto specific handler methods.

WHat is Maven
	Maven is a project management tool.
	Most popular use of Maven is for build management and dependencies.
	Maven download jar files which is mention in dependency and make those jar file available during compile time/run.
Standard Directory Structure
	src/main/java:java source code
	src/main/resource: property/config files used by your app
	src/main/webapp: JSP files and web config files other web assets(image,css,js etc)
	src/test: unit testing code and properties
	target: destination directory for compiled code. Automatically created by Maven
POM File
	POM file:project object model file, basically shopping list for Maven
	POM file contains:
		project meta data: project name,version etc
		dependencies: List of projects depends on Spring,Hibernate etc
		plugins: Additional custom task to run: generate JUnit test reports etc.
	project meta data : uniquely identifies a project
		Group Id: name of your company,group or organization. Convention is to use in reverse domain name: com.suntec
		Artifact Id: Name of the project
		Version: A specific release version like: 1.0,1.6,2.0.
			if project is under active development then: 1.0-SNAPSHOT 
	GSV: abbrevation for Group id, artifact Id and Version
Maven wrapper files: 
	mvnw allows you to run a Maven project, download correct version of Maven
Read data from application.properties
	@Value("${<keyVariable>}")
	private String variableName;
Under src/main/resources/static contains static resources like HTML files,CSS,javaScript,image etc
Under src/main/resources/templates contains templates

WhaT is Spring Boot Starter
	curated list of maven dependency
	collections of dependency grouped together
	tested and verified by spring development team
	reduce the amount of maven configuration
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-web</artifactId>			//It contains collections of maven dependency (i.e. contains spring-web,spring-webmvc,hibernate-validator,json,tomcat etc)
	</dependency>
Spring MVC is a library that simplifies the handling http request and response.
Spring MVC use dispatcher Servlet that act as a front controller for spring based web application.Any request is going to come into our website the front controller is going to stand in front and is going to accept all the requests and once the front controller accepts that request then this is the job of the front controller that it will make a decision that who is the right controller to handle that request.
Spring Dev Tool: restart our app automatically.
Spring boot Actuator: expose endpoints to monitor and manage your application. Just add dependency to POM file
	( /actuator/health--> default one,/actuator/info)
	in resource/application.properties file add management.endpoints.web.exposure.include=*			//expose all endpoints
To secure information of actuator add spring security to project and endpoints are secured
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-security</artifactId>
	</dependency>
	
	To override default user name and generated password, update application.properties file
		spring.security.user.name=admin
		spring.security.user.password=admin			default one is user and password get it from console
	To exclude /health,/info
		management.endpoints.web.exposure.exclude=health,info
Keep in mind jar file contains application+server

Two option for running the app from command line:
	1.mvnw package							//to package the app and generate the jar file inside target folder
	  java -jar <appName.jar>
	2.mvnw spring-boot:run
To read value from application.properties:
	@Value("${coach.name}")
	private String coachName;

SECTION-2 SPRING CORE

Inversion of Control: approach of outsourcing the construction and management of objects.
Primary function of spring container:
	1.create and manage objects (Inversion of Control)
	2.Inject object's dependencies (Dependency Injection)
Injection type:
	1.Construction Injection
		Use this when u have required dependencies
		Recommended by spring.io development team
	2.Setter Injection
		Use this when u have optional dependencies
		if dependency is not provided, ur app can provide reasonable default logic
Spring AutoWiring
	For dependency injection, Spring can use autowiring
	Spring will look for a class that matches, matches by type:class or interface
	Spring will inject it automatically...hence it is autowired.

@Component annotation
	@Component marks the class as spring bean.
	A spring bean is just a regular java class that is managed by Spring.
	@Component also makes the bean available for dependency injection
@Autowired annotation tells Spring to inject a dependency, if u have one constructor then @Autowired on constructor is optional.
@SpringBootApplication contains @AutoScanConfiguration, @Configuration, @__
	This will scan from packages and its sub packages
	If package is outside main package then list it in @SpringBootApplication(scanBasePackages={"com.luv2code.utils",....})
Field injection is no longer in use			//use of @Autowired before field

@Qualifier will specifically tells which class object it is looking for, if we have multiple class then to create object of specific class specify qualifier
	e.g. @Autowired
	     public DemoController(@Qualifier("cricketCoach") Coach theCoach) {				// same can be done for setter injection.Note here class name is in camelCase
		myCoach = theCoach;
		}
Alter to above approach use @Primary in one of the multiple class then no need to use @Qualifier.
If u mix @Qualifier and @Primary then @Qualifier has higher priority.

Bean class will initialize during application run but if u want to not initialize then add @Lazy annotation before class name so it won't initialize until dependency injection (by calling REST endpoint)
To make Lazy initialization available for all class, add spring.main.lazy-initialization=true in application.properties files

Default scope of bean is singleton (V.imp)
Spring container create one instance by default, cached in memory and all dependency injections for thr bean will refer the same bean.
To explicity specify bean scope :
	@Scope(configurableBeanFactory.SCOPE_SINGLETON)		// similary ...SCOPE_PROTOTYPE