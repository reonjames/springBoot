SECTION-1 QUICK START
why Spring
	Spring makes programming Java quicker, easier, and safer for everybody. Springâ€™s focus on speed, simplicity, and productivity has made it the world's most popular Java framework.

Inversion of control:
	In software engineering, inversion of control (IoC) is a design pattern in which custom-written portions of a computer program receive the flow of control from a generic framework.
Dependency injector:
	In software engineering, dependency injection is a programming technique in which an object or function receives other objects or functions that it requires, as opposed to creating them internally. Dependency injection aims to separate the concerns of constructing objects and using them, leading to loosely coupled programs
Spring Boot transforms how you approach Java programming tasks, radically streamlining your experience. Spring Boot combines necessities such as an application context and an auto-configured, embedded web server to make microservice development a cinch.

Spring Initializr is a web-based tool using which we can easily generate the structure of the Spring Boot project. It also provides various different features for the projects expressed in a metadata model. This model allows us to configure the list of dependencies that are supported by JVM.

Spring Annotations are a form of metadata that provides data about a program. Annotations are used to provide supplemental information about a program. It does not have a direct effect on the operation of the code they annotate.
RestController: RestController is used for making restful web services with the help of the @RestController annotation. This annotation is used at the class level and allows the class to handle the requests made by the client. 

@PostMapping annotation in Spring MVC framework is a powerful tool for handling the HTTP POST requests in your RESTful web services. It maps specific URLs to handler methods allowing you to receive and process data submitted through POST requests. The @PostMapping annotation is a Spring annotation that is used to map HTTP POST requests onto specific handler methods.
@GetMapping annotation in Spring is a powerful tool for building RESTful web services. It maps HTTP GET requests to a specific handler method in Spring controllers. With the help of @GetMapping annotation we can easily define endpoints of RESTful API and handle various HTTP requests. @GetMapping annotation is used for mapping HTTP GET requests onto specific handler methods.

WHat is Maven
	Maven is a project management tool.
	Most popular use of Maven is for build management and dependencies.
	Maven download jar files which is mention in dependency and make those jar file available during compile time/run.
Standard Directory Structure
	src/main/java:java source code
	src/main/resource: property/config files used by your app
	src/main/webapp: JSP files and web config files other web assets(image,css,js etc)
	src/test: unit testing code and properties
	target: destination directory for compiled code. Automatically created by Maven
POM File
	POM file:project object model file, basically shopping list for Maven
	POM file contains:
		project meta data: project name,version etc
		dependencies: List of projects depends on Spring,Hibernate etc
		plugins: Additional custom task to run: generate JUnit test reports etc.
	project meta data : uniquely identifies a project
		Group Id: name of your company,group or organization. Convention is to use in reverse domain name: com.suntec
		Artifact Id: Name of the project
		Version: A specific release version like: 1.0,1.6,2.0.
			if project is under active development then: 1.0-SNAPSHOT 
	GSV: abbrevation for Group id, artifact Id and Version
Maven wrapper files: 
	mvnw allows you to run a Maven project, download correct version of Maven
Read data from application.properties
	@Value("${<keyVariable>}")
	private String variableName;
Under src/main/resources/static contains static resources like HTML files,CSS,javaScript,image etc
Under src/main/resources/templates contains templates

WhaT is Spring Boot Starter
	curated list of maven dependency
	collections of dependency grouped together
	tested and verified by spring development team
	reduce the amount of maven configuration
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-web</artifactId>			//It contains collections of maven dependency (i.e. contains spring-web,spring-webmvc,hibernate-validator,json,tomcat etc)
	</dependency>
Spring MVC(model-view-controller) is a library that simplifies the handling http request and response.
Spring MVC use dispatcher Servlet that act as a front controller for spring based web application.Any request is going to come into our website the front controller is going to stand in front and is going to accept all the requests and once the front controller accepts that request then this is the job of the front controller that it will make a decision that who is the right controller to handle that request.
Spring Dev Tool: restart our app automatically.
Spring boot Actuator: expose endpoints to monitor and manage your application. Just add dependency to POM file
	( /actuator/health--> default one,/actuator/info)
	in resource/application.properties file add management.endpoints.web.exposure.include=*			//expose all endpoints
To secure information of actuator add spring security to project and endpoints are secured
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-security</artifactId>
	</dependency>
	
	To override default user name and generated password, update application.properties file
		spring.security.user.name=admin
		spring.security.user.password=admin			default one is user and password get it from console
	To exclude /health,/info
		management.endpoints.web.exposure.exclude=health,info
Keep in mind jar file contains application+server

Two option for running the app from command line:
	1.mvnw package							//to package the app and generate the jar file inside target folder
	  java -jar <appName.jar>
	2.mvnw spring-boot:run
To read value from application.properties:
	@Value("${coach.name}")
	private String coachName;

SECTION-2 SPRING CORE

Inversion of Control: approach of outsourcing the construction and management of objects.
Primary function of spring container:
	1.create and manage objects (Inversion of Control)
	2.Inject object's dependencies (Dependency Injection)
Injection type:
	1.Construction Injection: Constructor injection is the most preferred type of injection in Spring. In constructor injection, the dependencies are passed to the class constructor. This ensures that the dependencies are initialized before the class is used.
		Use this when u have required dependencies
		Recommended by spring.io development team
	2.Setter Injection: Setter injection is another type of injection in Spring. In setter injection, the dependencies are set using setter methods. This is less preferred than constructor injection because it can lead to null pointer exceptions if the dependencies are not set.
		Use this when u have optional dependencies
		if dependency is not provided, ur app can provide reasonable default logic
	3.Field injection: Field injection is the least preferred type of injection in Spring. In field injection, the dependencies are set directly to the fields of the class. This is not recommended because it can lead to tight coupling between the class and its dependencies.
Spring AutoWiring: Autowiring is a feature of Spring that allows the framework to automatically inject dependencies into a Spring bean. Autowiring can be achieved using the @Autowired annotation.
	For dependency injection, Spring can use autowiring
	Spring will look for a class that matches, matches by type:class or interface
	Spring will inject it automatically...hence it is autowired.

@Component annotation
	@Component marks the class as spring bean.
	A spring bean is just a regular java class that is managed by Spring.
	@Component also makes the bean available for dependency injection
@Autowired annotation tells Spring to inject a dependency, if u have one constructor then @Autowired on constructor is optional.
@SpringBootApplication contains @AutoScanConfiguration, @Configuration, @__
	This will scan from packages and its sub packages
	If package is outside main package then list it in @SpringBootApplication(scanBasePackages={"com.luv2code.utils",....})
Field injection is no longer in use			//use of @Autowired before field

@Qualifier will specifically tells which class object it is looking for, if we have multiple class then to create object of specific class specify qualifier
	e.g. @Autowired
	     public DemoController(@Qualifier("cricketCoach") Coach theCoach) {				// same can be done for setter injection.Note here class name is in camelCase
		myCoach = theCoach;
		}
Alter to above approach use @Primary in one of the multiple class then no need to use @Qualifier.
If u mix @Qualifier and @Primary then @Qualifier has higher priority.

Bean class will initialize during application run but if u want to not initialize then add @Lazy annotation before class name so it won't initialize until dependency injection (by calling REST endpoint)
To make Lazy initialization available for all class, add spring.main.lazy-initialization=true in application.properties files

Default scope of bean is singleton (V.imp)			*************************Till here**********************
Spring container create one instance by default, cached in memory and all dependency injections for the bean will refer the same bean.
To explicity specify bean scope :
	@Scope(configurableBeanFactory.SCOPE_SINGLETON)		// specify it at object class level, similary ...SCOPE_PROTOTYPE (new object instance creation for each injection)
Bean Lifecycle
	container started->bean initialized->dependency injected->internal spring processing->your custom Init method->bean is ready to use
	container is shutdown->your custom destroy method->stop
why bean lifecycle method
	bean initialization (@PostConstruct)
		calling custom business logic method
		setting up handles to resources(db,sockets,file etc)
	bean destruction (@P
		calling custom business logic method
		clean up handles to resources(db,sockets,file etc)
Init: method configuration
	@PostConstruct
	public void doMyStartupStuff() {
		System.out.println("In this method" +getClass().getSimpleName()); }
@PreDestroy
	public void doMyCleanupStuff() {
	 System.out.println("In this method" +getClass().getSimpleName()); }
Special note for Prototype beans
	for prototype scoped beans,spring does not call destroy method
	configured destruction lifecycles callbacks are not called, in case of prototype.
	Prototype beans are lazy by default. There is no need to use @Lazy annotation.

Configure bean with java code						//to make third party class as spring bean so that it can be available to spring framework
	1.create @Configuration class
	2.define @Bean method to configure the bean			//like return new class object and bean id is the method name
	3.Inject the bean into our controller				//inject the bean using bean id

Hibernate:
	A framework for persisting/saving java objects in a database
	It handles all low level SQL
	minimize the amount of JDBC code you have to develop
	It provide Object to relational mapping(ORM)
ORM: developer defines mapping between java class and database table.

JPA: Java Persistence API (JPA):
	standard API for Object to Relational Mapping(ORM)
	Only a Specification
		define a set of interfaces
		requires an impementation to be usable
Hibernate implement JPA interfaces that is Hibernate provide the implementation of method define in JPA.

//save it to database
example: entityManager.persist(theStudent);		//here entityManager is a special JPA helper object.
example: entityManager.find(Student.class, theId);	//query/retrieve the database for given id

To query for java objects i.e a list
	TypedQuery<Student> theQuery = entityManager.createQuery("from Student",Student.class);
	List<Student> students=theQuery.getResultList();		//getResultList() return a list of Student objects from the database
Relation b/w hibernate/JPA and JDBC
	Hibernate/JPA uses JDBC for all database communications.
MySQl has two components: MySQL Database server and MySQL Workbench
To add MySQL driver and spring Data JPA: add dependency mysql-coonector-j and spring-boot-starter-data-jpa
CommandLineRunner method will executed after the spring beans have been loaded.

Entity class (in perspective of JPA Hibernate): Java class that is mapped to a database table.
	At a minimum, the entity class:
		must be annoted with @Entity
		must have a public or protected no-argument constructor
		This class can have other constructors
Example of JPA/Hibernate class:
@Entity 
@Table(name="student")			//name of the table name in db
public class Student{
@Id
@GeneratedValue(strategy=GenerationType.IDENTITY)	//this is to inform that primary key ID value will be generated by db so java class do not need to worry.This generated type is most commonly used. It assign primary key using a database sequence.
@Column(name="id")			//name of the column name in student db
private int id;
...
}

If u want to customize generation strategy
	Create implementation of org.hibernate.id.IdentifierGenerator
	Override the method: public Serializable generate(....)
DAO: data access object, responsible for interfacing with the database. this is a common design pattern

DAO make use of JPA's entity manager and entity manager make use of Data source.Data source defines database connection info.
When to use entity manager and JPA repository?
	if u need low level control and flexibility use entity manager.
	if u want high level of abstraction,use JPA repository
@Transactional.....????
	automatically begin and end a transaction for your JPA code			//used mostly when we are doing create or update
@Repository
	sub annotation of @Component. Provide support for component scanning and translate JDBC exceptions.
	
Alter table student_tracker.student AUTO_INCREMENT = <ANY INTEGER value>		//this sql script will update auto increment of primary key to given value
Truncate student_tracker.student				//this sql script will update auto increment of primary key to 1 and remove all data from db

JPA : Query language for retrieving object.
Retrieving a Java object with JPA (read operation of CRUD)
e.g: Student myStudent= entityManager.find(Student.class,1);			//entity class is Student and primary key is 1, if not found it return null

TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student where lastName=:theData",Student.class);			//here From Student is a JPA Entity that is class name and ":theData" is JPQL named parameter. Act as a placeholder to be filled in later.
	List<Student> students=theQuery.getResultList();		//getResultList() return a list of Student objects from the database
CRUD operation mapping to entity manager:
	Create-> entityManager.persist()
	update-> entityManager.merge()				//merge can do update or save
	read ->  entityManager.find , entityManager.createQuery for object
	delete -> entityManager.remove					//if u wish to delete all student then in createQuery write DELETE FROM STUDENT
If u want to create table from java code then:
	in application.properties file: spring.jpa.hibernate.ddl-auto = create			// jpa/hibernate will drop tables and then create them
different property value can be given like none,create-only,drop,create-drop,validate,update
REST over HTTP
	HTTP method	CRUD operation
	POST		Create a new entity
	GET		Read a list of entities or single entity
	PUT		Update an existing entity
	Delete		Delete an existing entity
@RestController			//add REST support
@RequestMapping("/test")	//declare before class name
@GetMapping("/hello")		//access the REST endpoint at /test/hello

For simple REST testing for GET requests, web browser and Postman are similar.

Data binding is the process of converting JSON data to a java POJO(plain old java object) or vice versa.
Jackson handles data binding between JSON and Java POJO.
Spring will handle Jackson integration.JSON data being passed to REST controller is converted to POJO.
Java object being returned from REST controller is converted to JSON.

@PathVariable		//bind the path variable
	e.g. @GetMapping("/student/{studentId}")
	     public Student getStudent(@PathVariable int studentId){
		List<Student>.......
		return ob.get(index);		//jackson convert object to JSON
		}
@PostContsruct		//will be called only once when bean is construct.To load data not many times like initialising object with values when @GetMapping endpoint is called, so will create new method with this annotation to load once
@ExceptionHandler	//will return a ResponseEntity. ResponseEntity is a wrapper for the HTTP response object
@ControllerAdvice is similar to an interceptor / filter.		//applies at class level
	Pre-process requests to controller.
	Post-process responses to handle exceptions
	perfect for global exception handling.
	real time use of AOP(aspect oriented program)
Service layer
	purpose: service facade design pattern.Intermediate layer for custom business logic.Integrate data from multiple source(DAO/Repositories).
	example: Employee			Employee
		  REST		<----->		Service		<----->		Employee DAO, Skills DAO, Payroll DAO
		 Controller
@Service applied to service implementations. Spring will automatically register the Service implementation.sub annotation of @Component.
@RequestBody to handle json request

Spring Data JPA provides the interface: JpaRepository. Using spring data JPA different DAO (basically CRUD operation) will be create automatically.we only need to define the entity name and primary key.

Spring Data REST : using existing JpaRepository , it gives REST CRUD implementation for free.
	add spring-boot-starter-data-rest dependency to POM file
	by default Spring Data REST will create endpoints based on entity type. First character of entity type is lowercase and add "s" to the entity.
		e.g. public interface EmployeeRepository extends JpaRepository<Employee,Integer>{ }   	// here entity type is Employee so we have /employees
	Alternatively we can manually give endpoint name using @RepositoryRestResource(path = "<endpointName>")
		e.g. @RepositoryRestResource(path = "<endpointName>")
		     public interface EmployeeRepository extends JpaRepository<Employee,Integer>{ }
HATEOAS: spring data REST endpoints are HATEOAS compliant. Act as meta-data for REST data.

*************************************	
Spring Boot REST API Security
*************************************

spring security api pre process/post process web request before going to endpoint
Main purpose of security is to check authenticate and authorization
Define application security constraints in configuration
	@Configuration
Enable spring security:
	add spring-boot-starter-security dependency in pom.xml
	by adding this dependency it will automatically secure all endpoints for application
in spring boot passwords are stored using a specific format
	{id}encodedPassword
		here id can have noop( no operation that is plain text passwords) and bcrypt (Bcrypt password hashing) ...... values.
Restrict access to certain roles:
	requestMatchers(<HttpMethod>,<endPoints>).hasRole("<singleRole>")
		example: requestMatchers(HttpMethod.POST,"/api/employees").hasRole("MANAGER")
Spring Security can protect against CSRF security.

spring jdbc provide two table: users and authorities
jdbcUserDetailManager tellspring security to use JDBC authentication with our data source that is it will read and write authenticators from db(users,role and password)